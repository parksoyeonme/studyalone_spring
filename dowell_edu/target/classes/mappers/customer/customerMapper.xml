<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="customer">   

   <resultMap type="com.dowell.edu.vo.common.PartnerVO" id="PartnerVO">
    	<result column="prt_nm" property="prt_nm"/>
   
	</resultMap>
	
	<resultMap type="com.dowell.edu.vo.customer.CustomerVO" id="CustomerVO">
    	<result column="cust_no" property="cust_no"/>
    	<result column="cust_nm" property="cust_nm"/>
    	<result column="mbl_no" property="mbl_no"/>
    	<result column="cust_ss_cd" property="cust_ss_cd"/>
    	<result column="fst_js_dt" property="fst_js_dt"/>
    	<result column="lst_upd_id" property="lst_upd_id"/>
    	<result column="lst_upd_dt" property="lst_upd_dt"/>
    	<result column="lst_upd_dt_time" property="lst_upd_dt_time"/>
    	<result column="cust_nm_real" property="cust_nm_real"/>
    	<result column="user_nm" property="user_nm"/>
   		<result column="prt_nm" property="prt_nm"/>
   		<result column="prt_cd" property="prt_cd"/>
	</resultMap>
	
	<resultMap type="com.dowell.edu.vo.customer.CustomerHistoryVO" id="CustomerHistoryVO">
    	<result column="cust_no" property="cust_no"/>
    	<result column="chg_dt" property="chg_dt"/>
    	<result column="chg_seq" property="chg_seq"/>
    	<result column="chg_cd" property="chg_cd"/>
    	<result column="chg_bf_cnt" property="chg_bf_cnt"/>
    	<result column="chg_aft_cnt" property="chg_aft_cnt"/>
    	<result column="lst_upd_id" property="lst_upd_id"/>
    	<result column="lst_upd_dt" property="lst_upd_dt"/>
    	<result column="chg_bf_cd_nm" property="chg_bf_cd_nm"/>
    	<result column="chg_aft_cd_nm" property="chg_aft_cd_nm"/>
    	<result column="code_nm" property="code_nm"/>
    	<result column="code_cd" property="code_cd"/>
    	<result column="prt_nm" property="prt_nm"/>
    	<result column="prt_cd" property="prt_cd"/>
    	<result column="cust_nm" property="cust_nm"/>
    	<result column="lst_upd_dt_time" property="lst_upd_dt_time"/>
    	
    	<result column="tot_pur_amt" property="tot_pur_amt"/>
    	<result column="tot_pur_mm_amt" property="tot_pur_mm_amt"/>
    	<result column="tot_pur_dt" property="tot_pur_dt"/>
	</resultMap>
	
	
   <!-- 고객조회(팝업) -->
   <select id="selectcustSearchList" resultType="com.dowell.edu.vo.customer.CustomerVO" parameterType="Map">
	   SELECT
			 csmt.cust_no 															--고객번호
		    ,csmt.cust_nm 															--고객명
		    ,regexp_replace(csmt.mbl_no, '(.{3})(.+)(.{4})', '\1-\2-\3') AS mbl_no 	--휴대폰번호
		    ,CASE
		        WHEN csmt.cust_ss_cd = '10' THEN cddt.dtl_cd_nm    					--고객상태코드 정상
		        WHEN csmt.cust_ss_cd = '80' THEN cddt.dtl_cd_nm 					--고객상태코드 중지
		        ELSE cddt.dtl_cd_nm 												--고객상태코드 해지
		    END AS cust_ss_cd 														
		FROM cs_cust01_mt csmt 														--고객관리(cs_cust01_mt)table
		        left join ma_code_dt cddt 											--코드상세(ma_code_dt)table
		            on csmt.cust_ss_cd = cddt.dtl_cd 								--고객관리테이블의 고객상태코드(cust_ss_cd) 동일 코드상세의 세부코드(dtl_cd)
		WHERE
		    1 = 1
		    	and cddt.code_cd = 'CUST_SS_CD' 									--고객명,휴대폰번호 존재시 기본값
		    	and mbl_no like '%' || #{mbl_no} || '%'
			    and cust_nm like '%' || #{cust_nm} || '%'
		    	
			    <if test="mbl_no.equals('')">										--휴대폰번호없을시 이름조회
			        and cust_nm like '%' || #{cust_nm} || '%'
			    </if>
			    <if test="cust_nm.equals('')"> 									 	--고객명없을시 휴대폰번호조회
			        and mbl_no like '%' || #{mbl_no} || '%'							
			    </if>
			   
	</select>
	
	<!-- 고객리스트 -->
	<select id="selectcustAllSearchList" resultMap="CustomerVO">
	    SELECT
			    csmt.cust_no 													<!--  고객번호 -->
			    ,csmt.cust_nm AS cust_nm_real 									<!-- 마스킹되지않은 고객원본이름  -->
			    ,CASE
			        WHEN length(csmt.cust_nm) = 3 THEN 							<!--고객이름이 3자인 경우 이*연  -->
			            substr(csmt.cust_nm, 1, 1)
			            || lpad('*', length(csmt.cust_nm) - 2, '*')
			            || substr(csmt.cust_nm, length(csmt.cust_nm), 1)
			        WHEN length(csmt.cust_nm) > 3 THEN 							<!-- 고객이름이 3자리초과 남궁*우, 선우*  -->
			            substr(csmt.cust_nm, 1, 2)
			            || lpad('*', length(csmt.cust_nm) - 3, '*')
			            || substr(csmt.cust_nm, length(csmt.cust_nm), 1)
			        ELSE
			            substr(csmt.cust_nm, 1, 1)								<!-- 고객이름 외자 김* -->
			            || lpad('*', length(csmt.cust_nm) - 1, '*')
			    END cust_nm
			    ,REGEXP_REPLACE(REGEXP_REPLACE(csmt.mbl_no, '(.{3})(.*)(.{4})', '\1-\2-\3'), '-(.*)-', '-'
			    ||LPAD('*',LENGTH(REGEXP_REPLACE(csmt.mbl_no, '(.{3})(.*)(.{4})', '\2')), '*')
			    ||'-') mbl_no 												<!-- 휴대폰번호 가운데 3,4 자리 마스킹 -->
			   		        
			   ,CASE
			        WHEN csmt.cust_ss_cd = '10' THEN cddt.dtl_cd_nm  			<!-- 고객상태코드(cust_ss_cd) 10 일경우 정상 -->
			        WHEN csmt.cust_ss_cd = '80' THEN cddt.dtl_cd_nm 			<!-- 고객상태코드(cust_ss_cd) 80 일경우 중지 -->
			        ELSE cddt.dtl_cd_nm  										<!-- 해지 -->
			    END AS cust_ss_cd
			    
			    ,to_char(to_date(csmt.fst_js_dt, 'YYMMDD'), 'YYYY-MM-DD') fst_js_dt  	<!-- 가입날짜(fst_js_dt) 날짜변환 2021-01-01  -->
			    ,prtmt.prt_nm 															<!-- 매장명 -->
			    ,(
			        SELECT 																<!-- 수정자 성명 -->
			            usmt.user_nm
			        FROM
			            ma_user_mt usmt
			        WHERE
			            csmt.lst_upd_id = usmt.user_id
			     ) user_nm 															
			    ,csmt.lst_upd_id 														<!-- 수정자ID -->
			    ,to_char(csmt.lst_upd_dt, 'YYYY-MM-DD HH24MISS') AS lst_upd_dt_time 	<!-- 최종수정일자  -->
		FROM
			    cs_cust01_mt   csmt 													<!-- 고객관리(cs_cust01_mt),거래처관리(ma_prt_mt),코드상세(ma_code_dt) -->
			    LEFT JOIN ma_prt_mt prtmt ON csmt.jn_prt_cd = prtmt.prt_cd 				<!-- 고객관리테이블의 가입매장코드(jn_prt_cd) = 거래처관리테이블의 거래처코드(prt_cd) -->
			    LEFT JOIN ma_code_dt cddt on csmt.cust_ss_cd = cddt.dtl_cd 				<!-- 고객관리테이블의 고객상태코드(cust_ss_cd) = 코드상세테이블의 세부코드(dtl_cd)-->
			    LEFT JOIN ma_user_mt usmt ON csmt.lst_upd_id = usmt.user_id 			<!-- 사용자테이블의 사용자 ID(user_id) = 고객관리테이블의 수정자ID(lst_upd_id) -->
   		where 
   			1 = 1
   				and cddt.code_cd='CUST_SS_CD' 											<!-- 검색기본조건: 고객상태, 가입날짜  -->
   				and fst_js_dt between to_date(#{fromDate},'YYYY-MM-DD') 				<!-- 가입날짜(fst_js_dt)는 fromDate 날짜와 사이에 toDate날짜 사이에 위치 --> 
       								and to_date(#{toDate},'YYYY-MM-DD')
       			
				 <if test="cust_ss_cd != ''"> 											<!-- 고객상태가 있을경우(정상,중지,해지) -->
	       			and csmt.cust_ss_cd = #{cust_ss_cd}
			     </if>
		
		        <if test="jn_prt_cd.equals('') and !cust_no.equals('')">			<!-- 고객번호(cust_no) 존재, 매장코드(jn_prt_cd.equals) 없는경우 -->
		            and cust_no = #{cust_no}
		        </if>
		        
		        <if test="cust_no.equals('') and !jn_prt_cd.equals('')"> 				<!-- 매장코드 존재, 고객번호가 없는경우  -->
		            and jn_prt_cd = #{jn_prt_cd}
		        </if>
		        
		        <if test="!cust_no.equals('') and !jn_prt_cd.equals('')"> 				<!--  매장코드, 고객번호 둘다 존재 --> 
		        	and cust_no = #{cust_no}
		        	and jn_prt_cd = #{jn_prt_cd}
		        </if>
			
			order by cust_no asc
	</select>
	
	

	
	<!-- 고객조회의 고객상태 -->
	<select id="selectcustSsCd" resultType="com.dowell.edu.vo.common.CodeDetailVO">
		SELECT
		   	 code_cd  				--공통코드
		    ,dtl_cd 				--세부코드
		    ,dtl_cd_nm 				--세부코드명
		FROM
	    	ma_code_dt 				--코드상세
		WHERE
   			code_cd = 'CUST_SS_CD'
	
	</select>
	
	
	<!-- 고객이력 히스토리(cust_no,cust_nm)  -->
	<select id="custHistoryList" resultMap="CustomerHistoryVO" resultType="com.dowell.edu.vo.customer.CustomerHistoryVO" parameterType="Map">
	SELECT
			    chg_seq 											-- 일련번호
			    ,chg_dt										-- 이력변경일자
			    ,code_nm											--변경항목
			    ,nvl(chg_bf_cd_nm, chg_bf_cnt) AS chg_bf_cnt		 -- 변경전
			    ,nvl(chg_aft_cd_nm, chg_aft_cnt) AS chg_aft_cnt	 	-- 변경후
			    ,lst_upd_id										-- 마지막 수정자
			    ,lst_upd_dt_time 									-- 마지막 수정날짜
		FROM
		    (
		        SELECT
		            csht.chg_seq
		            ,csht.cust_no
		            ,to_char(to_date(csht.chg_dt, 'YYMMDD'), 'YYYY-MM-DD') chg_dt -- 변경날자 20210101 변환 
		            ,CASE
		                WHEN csht.chg_cd = 'MBL_NO'    THEN 				--이력테이블의 변경코드가 mbl_no일떄 휴대폰번호로 변경
		                    '휴대폰번호'
		                WHEN csht.chg_cd = 'JN_PRT_CD' THEN 				--이력테이블의 변경코드가 jnt_prt_cd일떄 매장로 변경
		                    '매장'
		                WHEN csht.chg_cd = 'CUST_NM'   THEN 				--이력테이블의 변경코드가 cust_nm일떄 고객명으로 변경
		                    '고객명'
		                WHEN csht.chg_cd = 'SEX_CD'   THEN 				--이력테이블의 변경코드가 cust_nm일떄 고객명으로 변경
		                    '성별'
		                WHEN csht.chg_cd = 'POC_CD'   THEN 				--이력테이블의 변경코드가 cust_nm일떄 고객명으로 변경
		                    '직업'
		                ELSE
		                    '생년월일' 			
		            END AS code_nm
		            ,( 														 
		                SELECT 												-- 변경전 코드
		                    cddt.dtl_cd_nm
		                FROM
		                    ma_code_dt cddt
		                WHERE
		                    cddt.dtl_cd = csht.chg_bf_cnt
		                    AND cddt.code_cd = csht.chg_cd
		            ) AS chg_bf_cd_nm
		            ,CASE
		                WHEN csht.chg_cd = 'MBL_NO'    THEN 					-- 변경코드(chg_cd)가 mbl_no 일시 000-0000-000
		                    regexp_replace(csht.chg_bf_cnt, '(.{3})(.+)(.{4})', '\1-\2-\3')
		                WHEN csht.chg_cd = 'JN_PRT_CD' THEN 					
		                    (
		                        SELECT
		                            prtmt.prt_nm 								--변경코드(chg_cd)가 kn_prt_cd일시 매장명
		                        FROM
		                            ma_prt_mt prtmt
		                        WHERE
		                            csht.chg_bf_cnt = prtmt.prt_cd
		                    )
		                ELSE
		                    csht.chg_bf_cnt
		            END AS chg_bf_cnt
		            ,(
		                SELECT
		                    cddt.dtl_cd_nm 										-- 변경후 코드
		                FROM
		                    ma_code_dt cddt
		                WHERE
		                    cddt.dtl_cd = csht.chg_aft_cnt
		                    AND cddt.code_cd = csht.chg_cd
		            ) AS chg_aft_cd_nm
		            ,CASE
		                WHEN csht.chg_cd = 'MBL_NO'    THEN
		                    regexp_replace(csht.chg_aft_cnt, '(.{3})(.+)(.{4})', '\1-\2-\3') 	-- 변경코드(chg_cd)가 mbl_no 일시 000-0000-000
		                WHEN csht.chg_cd = 'JN_PRT_CD' THEN
		                    (
		                        SELECT
		                            prtmt.prt_nm 										--변경코드(chg_cd)가 kn_prt_cd일시 매장명
		                        FROM
		                            ma_prt_mt prtmt
		                        WHERE
		                            csht.chg_aft_cnt = prtmt.prt_cd
		                    )
		                ELSE
		                    csht.chg_aft_cnt
		            END AS chg_aft_cnt
		            ,csht.lst_upd_id 														-- 마지막 수정자
		            ,to_char(csht.lst_upd_dt, 'YYYY-MM-DD HH24MISS') AS lst_upd_dt_time 	-- 마지막 수정일자
		        FROM
		            sd_cust01_ht   csht
		            LEFT JOIN ma_code_dt     cddt ON csht.chg_cd = cddt.code_cd 		-- 고객이력(sd_cust01_ht) 변경코드(chg_cd) 동일 코드상세(ma_code_dt) 공통코드(code_cd) 
		                                         AND csht.chg_bf_cnt = cddt.dtl_cd 		-- 고객이력(sd_cust01_ht의 변경전내용(chg_bf_cnt) 동일 코드상세(ma_code_dt)의 세부코드(dtl_cd)
		            
		            LEFT JOIN ma_prt_mt      prtmt ON csht.chg_bf_cnt = prtmt.prt_cd 	--- 고객이력의 변경전이력(chg_bf_cnt) 동일 거래처관리의 거래처코드(prt_cd) 
		                                         AND prtmt.prt_ss_cd = cddt.dtl_cd 		-- 거래처관리의 거래처상태코드(prt_ss_cd) 동일 코드상세의 세부코드(dtl_cd)
		            LEFT JOIN cs_cust01_mt   csmt ON csmt.poc_cd = cddt.dtl_cd 			-- 고객관리의 매장코드(poc_cd) 동일 코드상세의 세부코드(dtl_cd)  
		                                           AND csmt.sex_cd = cddt.dtl_cd 		-- 고객관리의 셩별코드(sex_cd) 동일 코드상세의 세부코드(dtl_cd)
		    ) aa
		         WHERE aa.cust_no = #{cust_no}
         ORDER BY chg_dt asc ,chg_seq asc
	
	</select>


	<!-- 히스토리팝업창 타이틀 고객명,고객이름 -->
	<select id="custInfoHistoryList" resultType="com.dowell.edu.vo.customer.CustomerVO">
		SELECT
		   	 CUST_NO 				<!-- 고객넘버 -->
		    ,CUST_NM 				<!-- 고객이름 -->
		FROM
		    CS_CUST01_MT 			<!-- 고객관리 테이블 -->
		WHERE
		    CUST_NO = #{cust_no}  	
	</select>
	
	<!-- 신규고객팝업 성별구분 M,F -->
	<select id="selectcodeCd" resultType="com.dowell.edu.vo.common.CodeDetailVO">
		SELECT
 			 code_cd 					<!-- 공통코드 -->
   			 ,dtl_cd 					<!-- 세부코드 -->
		   	 ,dtl_cd_nm 				<!-- 세부코드명 -->
		FROM
		   	 ma_code_dt 				<!-- 코드상세 테이블 -->
		WHERE
		   	 code_cd in('SEX_CD','POC_CD') 		<!-- 코드상세 테이블의 공통코드(code_cd) 중 'sex_cd'성별코드, 'poc_cd'직업코드 -->
		ORDER BY DTL_CD ASC  				 	
	</select>
	
	<!-- 이메일체크 -->
	 <select id="emailCheck" resultType="Integer">
		SELECT
		   	count(*)			
		FROM
		   	 cs_cust01_mt 			<!-- 고객관리 테이블 -->
		WHERE
		   	 email = #{email} 		<!-- 고객관리 테이블의 email -->
	
	</select> 
	
	<!-- 휴대폰 중복체크 -->
	<select id="mblCheck" resultType="Integer">
		SELECT 					
		   	 count(*) 				<!-- 휴대폰번호 count -->
		FROM
		   	 cs_cust01_mt 			<!-- 고객관리 테이블  -->
		WHERE
		   	 mbl_no = #{mbl_no} 	<!-- 고객관리 테이블의 휴대폰번호 -->
		
	</select>
	
	<insert id="insertcust" parameterType="Map">
		INSERT INTO cs_cust01_mt 
					(
				         CUST_NO   					<!-- 고객번호 -->
				        ,CUST_NM 					<!-- 고객명 -->
				        ,SEX_CD 					<!-- 성별코드 -->
				        ,SCAL_YN 					<!-- 양음력구분 -->
				        ,BRDY_DT 					<!-- 생년월일 -->
				        ,MRRG_DT 					<!-- 결혼기념일 -->
				        ,POC_CD 					<!-- 직업코드 -->
				        ,MBL_NO 					<!-- 휴대폰번호 -->
				        ,PSMT_GRC_CD 				<!-- 우편물수령코드 -->
				        ,EMAIL 						<!-- 이메일주소 -->
				        ,ZIP_CD 					<!-- 우편번호코드 -->
				        ,ADDR 						<!-- 주소 -->
				        ,ADDR_DTL 					<!-- 상세주소 -->
				        ,CUST_SS_CD 				<!-- 고객상태코드 -->
				        ,JN_PRT_CD 					<!-- 가입매장코드 -->
				        ,EMAIL_RCV_YN 				<!-- 이메일수신동의여부 -->
				        ,SMS_RCV_YN 				<!-- SMS수신동의여부 -->
				        ,TM_RCV_YN 					<!-- TM수신동의여부 -->
				        ,DM_RCV_YN 					<!-- DM수신동의여부 -->
				        ,FST_JS_DT 					<!-- 최초가입일자 -->
				        ,JS_DT 						<!-- 가입일자 -->
				        ,FST_REG_DT 				<!-- 최초등록일자 -->
				        ,FST_USER_ID 				<!-- 최초등록자 -->
				        ,LST_UPD_DT 				<!-- 최종수정일자 -->
				        ,LST_UPD_ID 				<!-- 최종수정자 -->
	 					
				    )
			VALUES (
				 		cs_cust01_mt_seq.NEXTVAL 												<!-- 고객번호 : cs_cust01_mt_seq : +1씩증가 -->
						,#{cust_nm} 															<!-- 고객명 -->
						,#{sex_cd} 																<!-- 성병코드 M:남자, F:여자 -->
						,#{scal_yn} 															<!-- 양음력구분 0:양력, 1:음력-->
						,to_char(to_date(#{brdy_dt},'YY/MM/DD'), 'YYYYMMDD')					<!-- 생년월일 : 20210910 -->
						,to_char(to_date(#{mrrg_dt},'YY/MM/DD'), 'YYYYMMDD')					<!-- 결혼기념일 : 20210910 -->
						,#{poc_cd} 																<!-- 직업코드 -->
						,#{mbl_no} 																<!-- 핸드폰번호 : 01011112222 -->
						,#{psmt_grc_cd} 														<!-- 우편물수령코드 H:자택, O: 직장 -->
						,#{email} 																<!-- 이메일주소 : aaa@gmail.com -->
						,#{zip_cd} 																<!-- 우편번호코드 -->
						,#{addr} 																<!-- 주소 -->
						,#{addr_dtl} 															<!-- 상세주소 -->
						,DEFAULT 																<!-- 고객상태코드 10 :정상, 80:중지, 90:해지-->
						,#{jn_prt_cd} 															<!-- 가입매장코드 -->
						,#{email_rcv_yn} 														<!-- 이메일수신동의여부 DEFAULT 'N' : Y:동의, 'N':미동의-->
						,#{sms_rcv_yn} 															<!-- SMS수신동의여부 DEFAULT 'N' : Y:동의, 'N':미동의 -->
						,DEFAULT 																<!-- TM수신동의여부 DEFAULT 'N' : Y:동의, 'N':미동의 -->
						,#{dm_rcv_yn} 															<!-- DM수신동의여부 DEFAULT 'N' : Y:동의, 'N':미동의 -->
						,to_char(to_date(SYSDATE, 'YY/MM/DD'), 'YYYYMMDD') 						<!-- 최초가입일자 -->
						,to_char(to_date(SYSDATE, 'YY/MM/DD'), 'YYYYMMDD')						<!-- 가입일자 -->															<!-- 해지일자 -->
						,SYSDATE 																<!-- 최조등록일자#{fst_rdg_dt} -->
						,#{user_id} 															<!-- 세션에 존재하는 최초등록자 --> 
						,SYSDATE 																<!-- 최종수정일자#{lst_upd_dt} -->
						,#{user_id} 															<!-- 세선에 존재하는 최종수정자 --> 
					)
	</insert>
	
	
	<!-- 고객정보조회(수정update) 휴대폰 중복체크 -->
	<select id="mblCheckDetail" resultType="Integer">
		SELECT 					
		   	 count(*) 				<!-- 휴대폰번호 -->
		   	
		FROM
		   	 cs_cust01_mt 			<!-- 고객관리 테이블  -->
		WHERE
		   							<!-- 현재 조회한 고객 말고 다른 고객들이 이 핸드폰번호 가지고 있을 때 체크 -->
		   	 mbl_no = #{mbl_no} 	<!-- 고객관리 테이블의 휴대폰번호 -->
									
	     	and   					<!-- 현재 조회한 고객이 갖고 있는 핸드폰번호 체크 -->
		     <![CDATA[
			     mbl_no <> (
					     	SELECT
					     		MBL_NO
					     	FROM 
					     		CS_CUST01_MT
					     	WHERE
					     		CUST_NO = #{cust_no}
					     )
		     ]]>
	     
	    
	</select>
	
	<select id="emailCheckDetail" resultType="Integer">
		SELECT
		    COUNT(*) 				<!-- 이메일 번호 카운트-->
		FROM
			CS_CUST01_MT 			<!-- 고객관리 테이블  -->
		WHERE
									<!-- 현재 조회한 고객 말고 다른 고객들이 이 이메일을 가지고 있을 때 체크 -->
			EMAIL = #{email} 		<!-- 고객관리 테이블의 email -->
									
			AND						<!-- 현재 조회한 고객이 가지고 있는 이메일 체크 -->
			<![CDATA[
		     EMAIL <> (			
				        SELECT
				            EMAIL 					
				        FROM
				            CS_CUST01_MT
				        WHERE
				            CUST_NO = #{cust_no}
				      )
			]]>

	</select>
	
	<select id="selectcommCd" resultType="com.dowell.edu.vo.common.CodeDetailVO">
		SELECT
		    	code_cd 			<!-- 공통코드 -->
		        ,dtl_cd 			<!-- 세부코드 -->
		        ,dtl_cd_nm 			<!-- 세부코드명 -->
		FROM
		    ma_code_dt 				<!-- 코드상세 table -->
		WHERE
		    code_cd IN ( 			<!-- 코드상세 table 의 세부코드 중  -->
		        'SEX_CD' 			<!-- 성별코드, 직업코드, 우편물수령코드, 고객상태코드 포함 -->
		        ,'POC_CD'
		        ,'PSMT_GRC_CD'
		        ,'CUST_SS_CD'
		    )
		ORDER BY code_cd ASC, dtl_cd ASC
	</select>
	
	<select id="selectDetailOne" resultMap="CustomerVO" >
	
		SELECT
		     CUMT.CUST_NO 																<!-- 고객관리의 고객번호 -->
		    ,CUMT.CUST_NM 																<!-- 고객명 -->
		    ,TO_CHAR(TO_DATE(CUMT.BRDY_DT, 'YYYYMMDD'), 'YYYY-MM-DD') BRDY_DT			<!-- 생년월일 -->
		    ,CUMT.SEX_CD 																<!-- 성별코드 -->
		    ,CUMT.SCAL_YN 																<!-- 양음력구분 -->
		    ,TO_CHAR(TO_DATE(CUMT.MRRG_DT, 'YYMMDD'), 'YYYY-MM-DD') MRRG_DT 			<!-- 결혼기념일 -->
		    ,CUMT.POC_CD 																<!-- 직업코드 -->
		    ,CUMT.MBL_NO 																<!-- 휴대폰번호 -->
		    ,SUBSTR(CUMT.MBL_NO, 1,3) MBL_NO_FIRST										<!-- 휴대폰번호 앞 3자리 -->
		    																			<!-- 휴대폰 11자리이상 가운데 4자리, 아닐시 3자리 -->
		    <![CDATA[ 																	
		    ,CASE 
		        WHEN LENGTH(CUMT.MBL_NO) > 10 THEN SUBSTR(CUMT.MBL_NO,4,4)	
		        ELSE SUBSTR(CUMT.MBL_NO, 4,3) 								
		   	END MBL_NO_MIDDLE
		    ,CASE
		    	WHEN LENGTH(CUMT.MBL_NO) > 10 THEN SUBSTR(CUMT.MBL_NO,8,4) 
		        ELSE SUBSTR(CUMT.MBL_NO, 7,4)
		    END MBL_NO_END
		    ]]>																			<!-- 휴대폰 11자리이상 끝자리 4자리 -->
		    ,CUMT.PSMT_GRC_CD 															<!-- 우편물수령코드 -->
		    ,CUMT.EMAIL 																<!-- 이메일 -->
		    ,SUBSTR(CUMT.EMAIL,1,INSTR(CUMT.EMAIL,'@',1,1)-1) EMAIL_START 				<!-- 이메일 ID부 -->
		    ,SUBSTR(CUMT.EMAIL,INSTR(CUMT.EMAIL,'@')+1) EMAIL_END						<!-- 이메일 host부  -->
		    ,CUMT.STP_DT 																<!-- 중지일자 -->
		    ,CUMT.ZIP_CD 																<!-- 우편번호코드 -->
		    ,CUMT.ADDR 																	<!-- 주소 -->
		    ,CUMT.ADDR_DTL 																<!-- 상세주소 -->
		    ,CUMT.CUST_SS_CD 															<!-- 고객상태코드 -->
		    ,CUMT.JN_PRT_CD 															<!-- 가입매장코드 -->
		    ,PRTMT.PRT_NM 																<!-- 거래처관리table의 거래처명 -->
		    ,CUMT.FST_JS_DT 															<!-- 최초가입일자 -->
		    ,CUMT.JS_DT 																<!-- 가입일자 -->
		    ,CUMT.EMAIL_RCV_YN 															<!-- 이메일수신동의여부 -->
		    ,CUMT.SMS_RCV_YN 															<!-- sms수신동의여부 -->
		    ,CUMT.DM_RCV_YN 															<!-- dm수신동의여부 -->
		    ,CUMT.CNCL_DT 																<!-- 해지일자 -->
		    ,(
		        SELECT 																	<!-- 총구매금액 3자리 숫자로 끊어서 , 표시 -->
		            TO_CHAR( SUM(TOT_SAL_AMT) , '999,999,999,999,999') 					<!-- 총구매금액 : TOT_PUR_AMT -->
		        FROM
		            CS_SAL01_MT
		        WHERE 
		        	CUST_NO = #{cust_no}
	    	 ) AS TOT_PUR_AMT
	    	,(
		        SELECT 																	<!-- 당월구매금액 3자리 숫자로 끊어서, 표시 -->
		           TO_CHAR( SUM(TOT_SAL_AMT) , '999,999,999,999,999') 					<!-- 당월구매금액 : TOT_PUR_MM_AMT -->
		        FROM
		            CS_SAL01_MT
		        WHERE 
		        	CUST_NO = #{cust_no}
		        	AND SUBSTR(SAL_DT, 1, 6) = TO_CHAR(SYSDATE, 'YYYYMM')
		        GROUP BY
		            SUBSTR(SAL_DT, 5, 2)
		     ) AS TOT_PUR_MM_AMT
		    ,(
		        SELECT 																	<!-- 최종구매일자 : TOT_PUR_DT -->
		            TO_CHAR(TO_DATE(MAX(SAL_DT), 'YYYYMMDD'), 'YYYY-MM-DD')
		        FROM
		            CS_SAL01_MT
		        WHERE
		        	CUST_NO = #{cust_no}
		        	AND SUBSTR(SAL_DT, 1, 6) = to_char(SYSDATE, 'YYYYMM')
		     ) AS TOT_PUR_DT
		FROM
		    CS_CUST01_MT CUMT 															<!-- 고객관리table 별칭 CUMT 매장코드(JN_PRT_CD) 동일-->
		    LEFT JOIN MA_PRT_MT PRTMT ON PRTMT.PRT_CD = CUMT.JN_PRT_CD 					<!-- 거래처관리table 별칭(PRTMT)의 매장코드(PRT_CD)와 -->
		    WHERE CUST_NO = #{cust_no} 													
		     										
		
	</select>
	
	<update id="updatecustDetail">
	 update cs_cust01_mt set
		CUST_NM = #{cust_nm}
		,SEX_CD = #{sex_cd}
		,SCAL_YN = #{scal_yn}
		,BRDY_DT = to_char(TO_DATE(#{brdy_dt}, 'YYYY-MM-DD'), 'YYYYMMDD') 
		,MRRG_dT = to_char(TO_DATE(#{mrrg_dt}, 'YYYY-MM-DD'), 'YYYYMMDD')
		,POC_CD = #{poc_cd}
		,PSMT_GRC_CD = #{psmt_grc_cd}

		,ZIP_CD = #{zip_cd} 
		,ADDR= #{addr}
		,ADDR_DTL= #{addr_dtl}
		,CUST_SS_CD= #{cust_ss_cd}
		,JN_PRT_CD= #{jn_prt_cd} 
		,EMAIL_RCV_YN= #{email_rcv_yn}
		,SMS_RCV_YN= #{sms_rcv_yn}
		,DM_RCV_YN= #{dm_rcv_yn}
		,MBL_NO =#{mbl_no}
		
		,EMAIL = #{email}
		,js_dt = #{js_dt}
					
				
		,STP_DT = 	#{stp_dt}
		,cncl_dt = 	#{cncl_dt}
		
				
		<!-- 여기서부터 안돌아가는 쿼리 -->
		
		<!-- 	<choose>
		<when test="cust_ss_cd = '10' ">
		,STP_DT = ''
		,CNCL_DT = ''
		</when>
		<when test="cust_ss_cd = '80' ">
		,STP_DT = SYSDATE
		</when>
		<when test="cust_ss_cd = '90' ">
		,CNCL_DT = SYSDATE
		</when>
		</choose> -->
		 
		,LST_UPD_DT = SYSDATE
		,LST_UPD_ID = #{user_id}
		where cust_no= #{cust_no}
	
	</update>
	
	
	<update id="insertCustHistory">
 <foreach item="list" collection="insertList" open="INSERT ALL" close="SELECT * FROM DUAL" separator=" ">
	INTO sd_cust01_ht 
					<!-- (
				         CUST_NO   					
				        ,CHG_DT 					
				        ,CHG_SEQ 					
				        ,CHG_CD 					
				        ,CHG_BF_CNT 					
				        ,CHG_AFT_CNT 
				        ,FST_REG_DT
        				,FST_USER_ID					
				        ,LST_UPD_DT 				
				        ,LST_UPD_ID 						
				   
	 					
				    ) -->
			VALUES 
				
				(
						#{list.cust_no}
						,to_char(to_date(SYSDATE, 'YY/MM/DD'), 'YYYYMMDD')
						,(select NVL(max(chg_seq), 0)
						  from sd_cust01_ht 
						  where cust_no= #{list.cust_no}
						  ) + 1
						,#{list.chg_cd}
						
						,#{list.chg_bf_cnt}
						,#{list.chg_aft_cnt}
						, (
							SELECT
					               fst_reg_dt
					            FROM
					                cs_cust01_mt
					           
					                where cust_no= #{list.cust_no}
						)
						, (
							SELECT
					               fst_user_id
					            FROM
					                cs_cust01_mt
					            
					                where cust_no= #{list.cust_no}
						)
						,SYSDATE
						,#{list.user_id}
						
				
				)
			</foreach>
			
	</update> 
  
	<!-- <select id="selectSeqCount" resultType="Integer">
		select NVL(max(chg_seq),0)
		from sd_cust01_ht
		where cust_no = #{cust_no}
	
	</select> -->
	
</mapper>